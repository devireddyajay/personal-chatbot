import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_openai import OpenAIEmbeddings, ChatOpenAI
from langchain_community.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain


OPEN_API_KEY=""

# upload pdf
st.header("my personal chatbot")

with st.sidebar:
    st.title("your documents")
    file=st.file_uploader("upload your file and ask questions",type="pdf")

#extract the text
if file is not None:
    pdf_reader = PdfReader(file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
    # st.write(text)

    # break it into chunks
    text_splitter = RecursiveCharacterTextSplitter(
        separators=["\n"],
        chunk_size=1000,
        chunk_overlap=50,
        length_function=len
    )
    chunks = text_splitter.split_text(text)

    # generating embedding
    embeddings = OpenAIEmbeddings(openai_api_key=OPEN_API_KEY)

    # creating vector store
    vectorstore = FAISS.from_texts(chunks, embeddings)

    # get user question
    userquestion = st.text_input("type your question here")

    # do similarity search
    if userquestion:
        match = vectorstore.similarity_search(userquestion)
        llm = ChatOpenAI(
            openai_api_key=OPEN_API_KEY,
            temperature=0.8,
            max_tokens=1000,
            model_name="gpt-3.5-turbo"
        )

        # output results
        chain = load_qa_chain(llm, chain_type="stuff")
        response = chain.run(input_documents=match, question=userquestion)
        st.write(response)
